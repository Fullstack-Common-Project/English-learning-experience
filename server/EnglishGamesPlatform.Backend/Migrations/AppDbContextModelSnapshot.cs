// <auto-generated />
using System;
using EnglishGamesPlatform.Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EnglishGamesPlatform.Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            // --- שאר הישויות קיימות כאן (Category, Game, GameResult, Image, ...) ---

            modelBuilder.Entity("EnglishGamesPlatform.Backend.Models.Entities.MissingWordSentence", b =>
            {
                b.Property<int>("MissingWordSentenceId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MissingWordSentenceId"));

                b.Property<int>("CorrectWordId")
                    .HasColumnType("int");

                b.Property<int>("SentenceId")
                    .HasColumnType("int");

                b.HasKey("MissingWordSentenceId");

                b.HasIndex("CorrectWordId");
                b.HasIndex("SentenceId");

                b.ToTable("MissingWords");
            });

            modelBuilder.Entity("EnglishGamesPlatform.Backend.Models.Entities.MemoryMatchSynonymsPair", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Synonym")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("varchar(100)");

                b.Property<int>("WordId")
                    .HasColumnType("int");

                b.HasKey("Id");
                b.HasIndex("WordId")
                    .IsUnique();

                b.ToTable("MemoryMatchSynonymsPairs");
            });

            // --- Relations for MissingWordSentence ---
            modelBuilder.Entity("EnglishGamesPlatform.Backend.Models.Entities.MissingWordSentence", b =>
            {
                b.HasOne("EnglishGamesPlatform.Backend.Models.Entities.Word", "CorrectWord")
                    .WithMany()
                    .HasForeignKey("CorrectWordId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("EnglishGamesPlatform.Backend.Models.Entities.Sentence", "Sentence")
                    .WithMany()
                    .HasForeignKey("SentenceId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("CorrectWord");
                b.Navigation("Sentence");
            });

            // --- Relations for MemoryMatchSynonymsPair ---
            modelBuilder.Entity("EnglishGamesPlatform.Backend.Models.Entities.MemoryMatchSynonymsPair", b =>
            {
                b.HasOne("EnglishGamesPlatform.Backend.Models.Entities.Word", "Word")
                    .WithOne()
                    .HasForeignKey("EnglishGamesPlatform.Backend.Models.Entities.MemoryMatchSynonymsPair", "WordId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Word");
            });

            // --- שאר Relations/Navigation Properties ---
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using EnglishGamesPlatform.Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EnglishGamesPlatform.Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            // --- ישויות קיימות ---
            modelBuilder.Entity("EnglishGamesPlatform.Backend.Models.Entities.MissingWordSentence", b =>
            {
                b.Property<int>("MissingWordSentenceId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MissingWordSentenceId"));

                b.Property<int>("CorrectWordId").HasColumnType("int");
                b.Property<int>("SentenceId").HasColumnType("int");

                b.Property<string>("Description")
                    .HasColumnType("longtext");

                b.HasKey("MissingWordSentenceId");
                b.HasIndex("CorrectWordId");
                b.HasIndex("SentenceId");

                b.ToTable("MissingWords");
            });

            modelBuilder.Entity("EnglishGamesPlatform.Backend.Models.Entities.Image", b =>
            {
                b.Property<int>("ImageId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ImageId"));

                b.Property<string>("ImageUrl")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<int>("WordId").HasColumnType("int");

                b.HasKey("ImageId");
                b.HasIndex("WordId");

                b.ToTable("Images");
            });

            modelBuilder.Entity("EnglishGamesPlatform.Backend.Models.Entities.ImageSentence", b =>
            {
                b.Property<int>("ImageSentenceId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ImageSentenceId"));

                b.Property<int>("CorrectSentenceId").HasColumnType("int");
                b.Property<int>("ImageId").HasColumnType("int");

                b.HasKey("ImageSentenceId");
                b.HasIndex("CorrectSentenceId");
                b.HasIndex("ImageId");

                b.ToTable("ImageSentences");
            });

            modelBuilder.Entity("EnglishGamesPlatform.Backend.Models.Entities.MemoryMatchSynonymsPair", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Synonym")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("varchar(100)");

                b.Property<int>("WordId").HasColumnType("int");

                b.HasKey("Id");
                b.HasIndex("WordId").IsUnique();

                b.ToTable("MemoryMatchSynonymsPairs");
            });

            modelBuilder.Entity("EnglishGamesPlatform.Backend.Models.Entities.OppositeWord", b =>
            {
                b.Property<int>("OppositeWordId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OppositeWordId"));

                b.Property<int>("FirstWordId").HasColumnType("int");
                b.Property<int>("SecondWordId").HasColumnType("int");

                b.HasKey("OppositeWordId");
                b.HasIndex("FirstWordId");
                b.HasIndex("SecondWordId");

                b.ToTable("OppositeWords");
            });

            // --- קשרים בין הישויות ---

            modelBuilder.Entity("EnglishGamesPlatform.Backend.Models.Entities.MissingWordSentence", b =>
            {
                b.HasOne("EnglishGamesPlatform.Backend.Models.Entities.Word", "CorrectWord")
                    .WithMany()
                    .HasForeignKey("CorrectWordId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("EnglishGamesPlatform.Backend.Models.Entities.Sentence", "Sentence")
                    .WithMany()
                    .HasForeignKey("SentenceId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("CorrectWord");
                b.Navigation("Sentence");
            });

            modelBuilder.Entity("EnglishGamesPlatform.Backend.Models.Entities.Image", b =>
            {
                b.HasOne("EnglishGamesPlatform.Backend.Models.Entities.Word", "Word")
                    .WithMany("Images")
                    .HasForeignKey("WordId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Word");
            });

            modelBuilder.Entity("EnglishGamesPlatform.Backend.Models.Entities.ImageSentence", b =>
            {
                b.HasOne("EnglishGamesPlatform.Backend.Models.Entities.Sentence", "CorrectSentence")
                    .WithMany()
                    .HasForeignKey("CorrectSentenceId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("EnglishGamesPlatform.Backend.Models.Entities.Image", "Image")
                    .WithMany()
                    .HasForeignKey("ImageId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("CorrectSentence");
                b.Navigation("Image");
            });

            modelBuilder.Entity("EnglishGamesPlatform.Backend.Models.Entities.MemoryMatchSynonymsPair", b =>
            {
                b.HasOne("EnglishGamesPlatform.Backend.Models.Entities.Word", "Word")
                    .WithOne()
                    .HasForeignKey("EnglishGamesPlatform.Backend.Models.Entities.MemoryMatchSynonymsPair", "WordId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Word");
            });

            modelBuilder.Entity("EnglishGamesPlatform.Backend.Models.Entities.OppositeWord", b =>
            {
                b.HasOne("EnglishGamesPlatform.Backend.Models.Entities.Word", "FirstWord")
                    .WithMany()
                    .HasForeignKey("FirstWordId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("EnglishGamesPlatform.Backend.Models.Entities.Word", "SecondWord")
                    .WithMany()
                    .HasForeignKey("SecondWordId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.Navigation("FirstWord");
                b.Navigation("SecondWord");
            });

            modelBuilder.Entity("EnglishGamesPlatform.Backend.Models.Entities.Word", b =>
            {
                b.Navigation("Images");
            });

#pragma warning restore 612, 618
        }
    }
}
